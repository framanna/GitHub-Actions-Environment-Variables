name: Deployment
on:
  push:
    branches:
      - main
      - dev
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  test:
    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb #mongodb+srv
      MONGODB_CLUSTER_ADDRESS: mongodb #(If my job runs under container, then I just put here the service name I put below) #mongodbcluster.mfbk8.mongodb.net
      MONGODB_USERNAME: root #${{ secrets.MONGODB_USERNAME}}
      MONGODB_PASSWORD: example #${{ secrets.MONGODB_PASSWORD}}
      PORT: 8080
    environment: testing
    runs-on: ubuntu-latest # The container has the ex environment, but still ubuntu VM is running that container
    container:
      image: node:20
      # env: # This is in case the container image some environment variables (Check DockerHub images for that)
    services: # services keyword is to create Service Containers (container that runs jobs on paralell databse so that I do not call production DB)
      mongodb:
        image: mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: ~/.npm
          key: ${{ env.CHACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: ${{ env.MONGODB_USERNAME }}"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |        
          echo "MONGODB_USERNAME: ${{ env.MONGODB_USERNAME }}"
          echo "MONGODB_NAME: $MONGODB_DB_NAME"
          echo "${{ env.PORT }}"
